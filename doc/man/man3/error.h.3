.TH "include/error.h" 3 "Fri Feb 8 2013" "PiThread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/error.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <errors\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_PICC_Error\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBASSERT\fP(test)   assert(test);"
.br
.ti -1c
.RI "#define \fBALLOC_ERROR\fP(error)   \fBPICC_Error\fP error = (\fBPICC_Error\fP){\&.id = 0, \&.file = NULL, \&.line = 0, \&.prev = NULL}"
.br
.ti -1c
.RI "#define \fBHAS_ERROR\fP(error)   error\&.id > 0"
.br
.ti -1c
.RI "#define \fBNEW_ERROR\fP(error, id)   \fBPICC_init_error\fP(error, id, __FILE__, __LINE__)"
.br
.ti -1c
.RI "#define \fBADD_ERROR\fP(error, prev, id)   \fBPICC_add_error\fP(error, prev, id, __FILE__, __LINE__)"
.br
.ti -1c
.RI "#define \fBFORWARD_ERROR\fP(error, prev)   \fBPICC_forward_error\fP(error, prev)"
.br
.ti -1c
.RI "#define \fBCRASH\fP(error)   \fBPICC_crash\fP(error, __FILE__, __FUNCTION__)"
.br
.ti -1c
.RI "#define \fBPRINT_ERROR\fP(error)   \fBPICC_print_error\fP(error, __FILE__, __FUNCTION__)"
.br
.ti -1c
.RI "#define \fBCRASH_NEW_ERROR\fP(id)"
.br
.ti -1c
.RI "#define \fBPRINT_NEW_ERROR\fP(id)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_PICC_Error\fP \fBPICC_Error\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBPICC_init_error\fP (\fBPICC_Error\fP *error, \fBPICC_ErrorId\fP id, const char *file, int line)"
.br
.ti -1c
.RI "void \fBPICC_add_error\fP (\fBPICC_Error\fP *error, \fBPICC_Error\fP prev_error, \fBPICC_ErrorId\fP id, const char *file, int line)"
.br
.ti -1c
.RI "\fBPICC_Error\fP * \fBPICC_copy_error\fP (const \fBPICC_Error\fP error)"
.br
.ti -1c
.RI "void \fBPICC_crash\fP (\fBPICC_Error\fP *error, const char *file, const char *fct)"
.br
.ti -1c
.RI "void \fBPICC_print_error\fP (\fBPICC_Error\fP *error, const char *file, const char *fct)"
.br
.ti -1c
.RI "void \fBPICC_forward_error\fP (\fBPICC_Error\fP *error, \fBPICC_Error\fP prev_error)"
.br
.ti -1c
.RI "const char * \fBPICC_get_error_message\fP (\fBPICC_ErrorId\fP id)"
.br
.ti -1c
.RI "void \fBPICC_free_error\fP (\fBPICC_Error\fP *error)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Provides several macros and functions to handle errors\&.
.PP
Senseless example of use: int \fBmain()\fP { \fBALLOC_ERROR(foo_err)\fP; foo(1, &foo_err); if (\fBHAS_ERROR(foo_err)\fP) \fBCRASH(&foo_err)\fP; // or \fBPRINT_ERROR(&foo_err)\fP return EXIT_SUCCESS; }
.PP
int foo(int a, PICC_Error *error) { int f = 0; if (a < 0) { \fBNEW_ERROR(error, ERR_WRONG_ARG)\fP; } else { \fBALLOC_ERROR(bar_err)\fP; int b = bar(-a, &bar_err); if (\fBHAS_ERROR(bar_err)\fP) \fBADD_ERROR(error, bar_err, ERR_FOO_FAILED)\fP; else f = a + b; } return f; }
.PP
int bar(int b, PICC_Error *error) { if (b < 0) \fBNEW_ERROR(error, ERR_WRONG_ARG)\fP; else b++; return b; }
.PP
This project is released under MIT License\&.
.PP
 
.PP
\fBAuthor:\fP
.RS 4
Mickaël MENU 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define ADD_ERROR(error, prev, id)   \fBPICC_add_error\fP(error, prev, id, __FILE__, __LINE__)"

.SS "#define ALLOC_ERROR(error)   \fBPICC_Error\fP error = (\fBPICC_Error\fP){\&.id = 0, \&.file = NULL, \&.line = 0, \&.prev = NULL}"

.SS "#define ASSERT(test)   assert(test);"

.SS "#define CRASH(error)   \fBPICC_crash\fP(error, __FILE__, __FUNCTION__)"

.SS "#define CRASH_NEW_ERROR(id)"
\fBValue:\fP
.PP
.nf
ALLOC_ERROR(error); \
    NEW_ERROR(&error, id); \
    CRASH(&error);
.fi
.SS "#define FORWARD_ERROR(error, prev)   \fBPICC_forward_error\fP(error, prev)"

.SS "#define HAS_ERROR(error)   error\&.id > 0"

.SS "#define NEW_ERROR(error, id)   \fBPICC_init_error\fP(error, id, __FILE__, __LINE__)"

.SS "#define PRINT_ERROR(error)   \fBPICC_print_error\fP(error, __FILE__, __FUNCTION__)"

.SS "#define PRINT_NEW_ERROR(id)"
\fBValue:\fP
.PP
.nf
ALLOC_ERROR(error); \
    NEW_ERROR(&error, id); \
    PRINT_ERROR(&error);
.fi
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_PICC_Error\fP  \fBPICC_Error\fP"
An error stack\&. 
.SH "Function Documentation"
.PP 
.SS "void PICC_add_error (\fBPICC_Error\fP *error, \fBPICC_Error\fPprev_error, \fBPICC_ErrorId\fPid, const char *file, intline)"
Adds a new error to the error stack by appending the previous error to the new one\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP New error to be returned by the caller\&. 
.br
\fIprev_error\fP Previous error occured\&. 
.br
\fIfile\fP File where the error occured\&. 
.br
\fIline\fP Line in <file> where the error occured\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
New error linked to previous error\&. 
.RE
.PP

.SS "\fBPICC_Error\fP* PICC_copy_error (const \fBPICC_Error\fPerror)"
Copies a given error to a new allocated memory location\&.
.PP
This is used to ensure the previous error in an error stack are not automatically freed\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error to be copied\&. 
.br
\fICopy\fP of <error>\&. 
.RE
.PP

.SS "void PICC_crash (\fBPICC_Error\fP *error, const char *file, const char *fct)"
Prints the given error stack on the standard error output and quits the program with failure return code\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.br
\fIfile\fP File where the crash occured (for DEBUG) 
.br
\fIfct\fP Function where the crash occured (for DEBUG) 
.RE
.PP

.SS "void PICC_forward_error (\fBPICC_Error\fP *error, \fBPICC_Error\fPprev_error)"
Forwards an error by copying all the value of the previous error in the given error\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Current error\&. 
.br
\fIprev_error\fP Previous error\&. 
.RE
.PP

.SS "void PICC_free_error (\fBPICC_Error\fP *error)"
Frees the memory used by an error stack\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack\&. 
.RE
.PP

.SS "const char* PICC_get_error_message (\fBPICC_ErrorId\fPid)"
Returns the error message corresponding to the given error ID\&.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP Error identifier 
.RE
.PP
\fBReturns:\fP
.RS 4
Error message 
.RE
.PP

.SS "void PICC_init_error (\fBPICC_Error\fP *error, \fBPICC_ErrorId\fPid, const char *file, intline)"
Initializes a new error with a given error ID, file and line\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP New error to be returned by the caller\&. 
.br
\fIfile\fP File where the error occured\&. 
.br
\fIline\fP Line in <file> where the error occured\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Initialized error\&. 
.RE
.PP

.SS "void PICC_print_error (\fBPICC_Error\fP *error, const char *file, const char *fct)"
Prints the given error stack on the standard error output\&. The sub-errors are freed after being printed\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.br
\fIfile\fP File where the print occured (for DEBUG) 
.br
\fIfct\fP Function where the print occured (for DEBUG) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for PiThread from the source code\&.
