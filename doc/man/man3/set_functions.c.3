.TH "src/set_functions.c" 3 "Fri Feb 8 2013" "PiThread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/set_functions.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <set\&.h>\fP
.br
\fC#include <tools\&.h>\fP
.br
\fC#include <errors\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBPICC_set_add_commit\fP (\fBPICC_Set\fP *s, \fBPICC_Commit\fP *elem)"
.br
.ti -1c
.RI "void \fBPICC_set_add_knowns\fP (\fBPICC_Set\fP *s, \fBPICC_Knowns\fP *elem)"
.br
.ti -1c
.RI "bool \fBPICC_cmp_commit\fP (\fBPICC_Commit\fP *c, \fBPICC_Commit\fP *c2, \fBPICC_Error\fP *err)"
.br
.ti -1c
.RI "bool \fBPICC_cmp_knowns\fP (\fBPICC_Knowns\fP *k, \fBPICC_Knowns\fP *k2, \fBPICC_Error\fP *err)"
.br
.ti -1c
.RI "bool \fBPICC_set_mem_commit\fP (\fBPICC_Set\fP *s, \fBPICC_Commit\fP *c, \fBPICC_Error\fP *err)"
.br
.ti -1c
.RI "bool \fBPICC_set_mem_knowns\fP (\fBPICC_Set\fP *s, \fBPICC_Knowns\fP *k, \fBPICC_Error\fP *err)"
.br
.ti -1c
.RI "void \fBPICC_set_map_commit\fP (\fBPICC_Set\fP *s, void(*func)(\fBPICC_Commit\fP *))"
.br
.ti -1c
.RI "void \fBPICC_set_map_knowns\fP (\fBPICC_Set\fP *s, void(*func)(\fBPICC_Knowns\fP *))"
.br
.ti -1c
.RI "\fBPICC_Commit\fP * \fBPICC_clone_commit\fP (\fBPICC_Commit\fP *c)"
.br
.ti -1c
.RI "\fBPICC_Knowns\fP * \fBPICC_clone_knowns\fP (\fBPICC_Knowns\fP *k)"
.br
.ti -1c
.RI "\fBPICC_Set\fP * \fBPICC_set_inter_commit\fP (\fBPICC_Set\fP *s1, \fBPICC_Set\fP *s2)"
.br
.ti -1c
.RI "\fBPICC_Set\fP * \fBPICC_set_inter_knowns\fP (\fBPICC_Set\fP *s1, \fBPICC_Set\fP *s2)"
.br
.ti -1c
.RI "\fBPICC_Set\fP * \fBPICC_set_inter\fP (\fBPICC_Set\fP *s1, \fBPICC_Set\fP *s2)"
.br
.ti -1c
.RI "void \fBPICC_set_iter_commit\fP (\fBPICC_Set\fP *s, void(*func)(\fBPICC_Commit\fP *arg))"
.br
.ti -1c
.RI "void \fBPICC_set_iter_knowns\fP (\fBPICC_Set\fP *s, void(*func)(\fBPICC_Knowns\fP *arg))"
.br
.ti -1c
.RI "void \fBPICC_set_iter\fP (\fBPICC_Set\fP *s, void(*func)(void *))"
.br
.in -1c
.SH "Detailed Description"
.PP 
Provides several functions to commit and knowns sets\&.
.PP
This project is released under MIT License\&.
.PP
\fBAuthor:\fP
.RS 4
Maxence WO 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBPICC_Commit\fP* PICC_clone_commit (\fBPICC_Commit\fP *c)"

.SS "\fBPICC_Knowns\fP* PICC_clone_knowns (\fBPICC_Knowns\fP *k)"

.SS "bool PICC_cmp_commit (\fBPICC_Commit\fP *c, \fBPICC_Commit\fP *c2, \fBPICC_Error\fP *err)"
Compare 2 commits
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Commit 
.br
\fIc2\fP Commit 
.br
\fIerr\fP Error 
.RE
.PP
\fBReturns:\fP
.RS 4
res true if commits are the same else false 
.RE
.PP

.SS "bool PICC_cmp_knowns (\fBPICC_Knowns\fP *k, \fBPICC_Knowns\fP *k2, \fBPICC_Error\fP *err)"
Compare 2 knowns
.PP
\fBParameters:\fP
.RS 4
\fIk\fP Knowns 
.br
\fIk2\fP Knowns 
.br
\fIerr\fP Error 
.RE
.PP
\fBReturns:\fP
.RS 4
res true if knowns are the same else false 
.RE
.PP

.SS "void PICC_set_add_commit (\fBPICC_Set\fP *s, \fBPICC_Commit\fP *elem)"
Add a commit to a set
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Set 
.br
\fIelem\fP Commit 
.RE
.PP

.SS "void PICC_set_add_knowns (\fBPICC_Set\fP *s, \fBPICC_Knowns\fP *elem)"
Add a knowns to a set
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Set 
.br
\fIelem\fP Knowns 
.RE
.PP

.SS "\fBPICC_Set\fP* PICC_set_inter (\fBPICC_Set\fP *s1, \fBPICC_Set\fP *s2)"

.SS "\fBPICC_Set\fP* PICC_set_inter_commit (\fBPICC_Set\fP *s1, \fBPICC_Set\fP *s2)"

.SS "\fBPICC_Set\fP* PICC_set_inter_knowns (\fBPICC_Set\fP *s1, \fBPICC_Set\fP *s2)"

.SS "void PICC_set_iter (\fBPICC_Set\fP *s, void(*)(void *)func)"

.SS "void PICC_set_iter_commit (\fBPICC_Set\fP *s, void(*)(\fBPICC_Commit\fP *arg)func)"

.SS "void PICC_set_iter_knowns (\fBPICC_Set\fP *s, void(*)(\fBPICC_Knowns\fP *arg)func)"

.SS "void PICC_set_map_commit (\fBPICC_Set\fP *s, void(*)(\fBPICC_Commit\fP *)func)"
Apply a fonction to all elements of a set
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Set 
.br
\fIfunc\fP Function that takes a commit parameter 
.RE
.PP

.SS "void PICC_set_map_knowns (\fBPICC_Set\fP *s, void(*)(\fBPICC_Knowns\fP *)func)"
Apply a fonction to all elements of a set
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Set 
.br
\fIfunc\fP Function that takes a knowns parameter 
.RE
.PP

.SS "bool PICC_set_mem_commit (\fBPICC_Set\fP *s, \fBPICC_Commit\fP *c, \fBPICC_Error\fP *err)"
Search if a commit is in a set
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Set 
.br
\fIc\fP Commit 
.br
\fIerr\fP Error 
.RE
.PP
\fBReturns:\fP
.RS 4
res true if c is in s 
.RE
.PP

.SS "bool PICC_set_mem_knowns (\fBPICC_Set\fP *s, \fBPICC_Knowns\fP *k, \fBPICC_Error\fP *err)"
Search if a knowns is in a set
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Set 
.br
\fIk\fP knowns 
.br
\fIerr\fP Error 
.RE
.PP
\fBReturns:\fP
.RS 4
res true if k is in s 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for PiThread from the source code\&.
