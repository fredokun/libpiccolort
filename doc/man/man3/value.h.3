.TH "include/value.h" 3 "Fri Jan 25 2013" "PiThread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/value.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <channel\&.h>\fP
.br
\fC#include <sync\&.h>\fP
.br
\fC#include <error\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_PICC_Value\fP"
.br
.ti -1c
.RI "struct \fB_PICC_Clock\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_PICC_ValueKind\fP \fBPICC_ValueKind\fP"
.br
.ti -1c
.RI "typedef struct \fB_PICC_Value\fP \fBPICC_Value\fP"
.br
.ti -1c
.RI "typedef struct \fB_PICC_Value\fP \fBPICC_AtomicBoolean\fP"
.br
.ti -1c
.RI "typedef struct \fB_PICC_Value\fP \fBPICC_AtomicInt\fP"
.br
.ti -1c
.RI "typedef struct \fB_PICC_Clock\fP \fBPICC_Clock\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_PICC_ValueKind\fP { \fBPICC_INT_VAL\fP, \fBPICC_FLOAT_VAL\fP, \fBPICC_STRING_VAL\fP, \fBPICC_BOOL_VAL\fP, \fBPICC_CHANNEL_VAL\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPICC_Value\fP * \fBPICC_create_value\fP (\fBPICC_ValueKind\fP type, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_AtomicBoolean\fP * \fBPICC_create_atomic_bool\fP (\fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_AtomicInt\fP * \fBPICC_create_atomic_int\fP (\fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_Clock\fP * \fBPICC_create_clock\fP (\fBPICC_Error\fP *error)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Values exchanged through the program\&.
.PP
This project is released under MIT License\&.
.PP
\fBAuthor:\fP
.RS 4
MickaÃ«l MENU 
.PP
Maxence WO 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_PICC_Value\fP \fBPICC_AtomicBoolean\fP"
An atomic boolean is a PICC_Value that has PICC_BOOL_VAL in kind\&. To acquire and release an atomic boolean, on it's lock of use the PICC_acquire and PICC_release functions that are defined in \fBsync\&.h\fP 
.SS "typedef struct \fB_PICC_Value\fP \fBPICC_AtomicInt\fP"
An atomic integer is a PICC_Value that has PICC_INT_VAL in kind\&. To acquire and release an atomic integer, on it's lock of use the PICC_acquire and PICC_release functions that are defined in \fBsync\&.h\fP 
.SS "typedef struct \fB_PICC_Clock\fP  \fBPICC_Clock\fP"
A type to represent PiThread clocks 
.SS "typedef struct \fB_PICC_Value\fP  \fBPICC_Value\fP"
A type to represent an arbitrary value 
.SS "typedef enum \fB_PICC_ValueKind\fP  \fBPICC_ValueKind\fP"
The types a value may have 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_PICC_ValueKind\fP"
The types a value may have 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPICC_INT_VAL \fP\fP
integer 
.TP
\fB\fIPICC_FLOAT_VAL \fP\fP
single float 
.TP
\fB\fIPICC_STRING_VAL \fP\fP
string (char *) 
.TP
\fB\fIPICC_BOOL_VAL \fP\fP
booolean 
.TP
\fB\fIPICC_CHANNEL_VAL \fP\fP
channel (
.PP
\fBSee Also:\fP
.RS 4
\fBchannel\&.h\fP) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBPICC_AtomicBoolean\fP* PICC_create_atomic_bool (\fBPICC_Error\fP *error)"

.SS "\fBPICC_AtomicInt\fP* PICC_create_atomic_int (\fBPICC_Error\fP *error)"
Creates an atomic integer\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created atomic integer 
.RE
.PP

.SS "\fBPICC_Clock\fP* PICC_create_clock (\fBPICC_Error\fP *error)"
Creates a new clock\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created clock 
.RE
.PP

.SS "\fBPICC_Value\fP* PICC_create_value (\fBPICC_ValueKind\fPtype, \fBPICC_Error\fP *error)"
Creates a new value of given type\&.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP Type of the value 
.br
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created value 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for PiThread from the source code\&.
