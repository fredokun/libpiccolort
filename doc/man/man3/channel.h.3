.TH "include/channel.h" 3 "Fri Jan 25 2013" "PiThread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/channel.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <commit\&.h>\fP
.br
\fC#include <sync\&.h>\fP
.br
\fC#include <error\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_PICC_Channel\fP"
.br
.ti -1c
.RI "struct \fB_PICC_Knowns\fP"
.br
.ti -1c
.RI "struct \fB_PICC_KnownsSet\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_PICC_Channel\fP \fBPICC_Channel\fP"
.br
.ti -1c
.RI "typedef enum \fB_PICC_KnowsState\fP \fBPICC_KnownsState\fP"
.br
.ti -1c
.RI "typedef struct \fB_PICC_Knowns\fP \fBPICC_Knowns\fP"
.br
.ti -1c
.RI "typedef struct \fB_PICC_KnownsSet\fP \fBPICC_KnownsSet\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_PICC_KnowsState\fP { \fBPICC_UNKNOWN\fP, \fBPICC_KNOWN\fP, \fBPICC_FORGET\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPICC_Channel\fP * \fBPICC_create_channel\fP (\fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_Channel\fP * \fBPICC_create_channel_cn\fP (int commit_size, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_Knowns\fP * \fBPICC_create_knowns\fP (\fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_KnownsSet\fP * \fBPICC_create_knowns_set\fP (int length, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "void \fBPICC_channel_incr_ref_count\fP (\fBPICC_Channel\fP *ch, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "void \fBPICC_channel_dec_ref_count\fP (\fBPICC_Channel\fP *ch, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "void \fBPICC_reclaim_channel\fP (\fBPICC_Channel\fP *channel, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_KnownsSet\fP * \fBPICC_knowns_set_knows\fP (\fBPICC_KnownsSet\fP *ks, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_KnownsSet\fP * \fBPICC_knowns_set_forget\fP (\fBPICC_KnownsSet\fP *ks, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "bool \fBPICC_knowns_register\fP (\fBPICC_KnownsSet\fP *ks, \fBPICC_Channel\fP *ch, \fBPICC_Error\fP *error)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Channels\&.
.PP
This project is released under MIT License\&.
.PP
\fBAuthor:\fP
.RS 4
MickaÃ«l MENU 
.PP
Maxence WO 
.PP
Dany SIRIPHOL 
.PP
Joel HING 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_PICC_Channel\fP  \fBPICC_Channel\fP"
The type of the pi-thread channels 
.SS "typedef struct \fB_PICC_Knowns\fP  \fBPICC_Knowns\fP"
The type of a channel with a known state 
.SS "typedef struct \fB_PICC_KnownsSet\fP  \fBPICC_KnownsSet\fP"
The set of known channels 
.SS "typedef enum \fB_PICC_KnowsState\fP  \fBPICC_KnownsState\fP"
The known state of a channel 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_PICC_KnowsState\fP"
The known state of a channel 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPICC_UNKNOWN \fP\fP
TODO see spec 
.TP
\fB\fIPICC_KNOWN \fP\fP
TODO see spec 
.TP
\fB\fIPICC_FORGET \fP\fP
TODO see spec 
.SH "Function Documentation"
.PP 
.SS "void PICC_channel_dec_ref_count (\fBPICC_Channel\fP *channel, \fBPICC_Error\fP *error)"
Decrements the global reference count of a channel\&.
.PP
\fBParameters:\fP
.RS 4
\fIChannel\fP to update 
.RE
.PP

.SS "void PICC_channel_incr_ref_count (\fBPICC_Channel\fP *channel, \fBPICC_Error\fP *error)"
Increments the global reference count of a channel\&.
.PP
\fBParameters:\fP
.RS 4
\fIChannel\fP to update 
.RE
.PP

.SS "\fBPICC_Channel\fP* PICC_create_channel (\fBPICC_Error\fP *error)"
Creates a channel which contains 10 commitments\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created channel 
.RE
.PP

.SS "\fBPICC_Channel\fP* PICC_create_channel_cn (intcommit_size, \fBPICC_Error\fP *error)"
Creates a channel which contains <commit_size> commitments\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created channel 
.RE
.PP

.SS "\fBPICC_Knowns\fP* PICC_create_knowns (\fBPICC_Error\fP *error)"
Creates a new Knowns structure\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created knowns structure 
.RE
.PP

.SS "\fBPICC_KnownsSet\fP* PICC_create_knowns_set (intlength, \fBPICC_Error\fP *error)"
Creates a new Knowns set\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created knowns set 
.RE
.PP

.SS "bool PICC_knowns_register (\fBPICC_KnownsSet\fP *ks, \fBPICC_Channel\fP *ch, \fBPICC_Error\fP *error)"
Adds a channel to a knowns set\&.
.PP
Looks for a channel in a PICC_KnownsSet
.IP "\(bu" 2
if the channel is in the PICC_KnownsSet in KNOWN-STATE, it returns false
.IP "\(bu" 2
if the channel is in the PICC_KnownsSet in FORGET-STATE, it switches it to KNOWN then returns false
.IP "\(bu" 2
else it add the channel in the PICC_KnownsSet (KNOWS-STATE) then returns true
.PP
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knowns set 
.br
\fIch\fP Channel to add 
.br
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether the channel has been added 
.RE
.PP

.SS "\fBPICC_KnownsSet\fP* PICC_knowns_set_forget (\fBPICC_KnownsSet\fP *ks, \fBPICC_Error\fP *error)"
Returns a subset of all FORGET-STATE in a knowns set\&.
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knowns set 
.br
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Subset of all forget state in the given set\&. 
.RE
.PP

.SS "\fBPICC_KnownsSet\fP* PICC_knowns_set_knows (\fBPICC_KnownsSet\fP *ks, \fBPICC_Error\fP *error)"
Returns a subset of all KNOWN-STATE in a knows set\&.
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knowns set 
.br
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Subset of all known state in the given set 
.RE
.PP

.SS "void PICC_reclaim_channel (\fBPICC_Channel\fP *channel, \fBPICC_Error\fP *error)"
Reclaims the given channel\&.
.PP
\fBParameters:\fP
.RS 4
\fIchannel\fP Channel to reclaim 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for PiThread from the source code\&.
