.TH "src/channel.c" 3 "Fri Feb 8 2013" "PiThread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/channel.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <channel\&.h>\fP
.br
\fC#include <tools\&.h>\fP
.br
\fC#include <error\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDEFAULT_CHANNEL_SIZE\fP   10"
.br
.ti -1c
.RI "#define \fBLOCK_CHANNEL\fP(c)   \fBPICC_acquire\fP(&(c->lock));"
.br
.ti -1c
.RI "#define \fBRELEASE_CHANNEL\fP(c)   \fBPICC_release\fP(&(c->lock));"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPICC_Channel\fP * \fBPICC_create_channel\fP ()"
.br
.ti -1c
.RI "\fBPICC_Channel\fP * \fBPICC_create_channel_cn\fP (int commit_size)"
.br
.ti -1c
.RI "\fBPICC_Knowns\fP * \fBPICC_create_knowns\fP (\fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_KnownsSet\fP * \fBPICC_create_knowns_set\fP (int length, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "void \fBPICC_channel_incr_ref_count\fP (\fBPICC_Channel\fP *channel)"
.br
.ti -1c
.RI "void \fBPICC_channel_dec_ref_count\fP (\fBPICC_Channel\fP *channel)"
.br
.ti -1c
.RI "void \fBPICC_reclaim_channel\fP (\fBPICC_Channel\fP *channel, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "\fBPICC_KnownsSet\fP * \fBPICC_knowns_set_knows\fP (\fBPICC_KnownsSet\fP *ks)"
.br
.ti -1c
.RI "\fBPICC_KnownsSet\fP * \fBPICC_knowns_set_forget\fP (\fBPICC_KnownsSet\fP *ks)"
.br
.ti -1c
.RI "void \fBPICC_knowns_set_forget_to_unknown\fP (\fBPICC_KnownsSet\fP *ks, \fBPICC_Channel\fP *ch)"
.br
.ti -1c
.RI "void \fBPICC_knowns_set_forget_all\fP (\fBPICC_KnownsSet\fP *ks)"
.br
.ti -1c
.RI "bool \fBPICC_knowns_register\fP (\fBPICC_KnownsSet\fP *ks, \fBPICC_Channel\fP *ch)"
.br
.ti -1c
.RI "void \fBPICC_release_all_channels\fP (\fBPICC_Channel\fP **chans, int nb_chans)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Channels\&.
.PP
This project is released under MIT License\&.
.PP
\fBAuthor:\fP
.RS 4
Maxence WO 
.PP
Dany SIRIPHOL 
.PP
Joel HING 
.PP
MickaÃ«l MENU 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define DEFAULT_CHANNEL_SIZE   10"

.SS "#define LOCK_CHANNEL(c)   \fBPICC_acquire\fP(&(c->lock));"

.SS "#define RELEASE_CHANNEL(c)   \fBPICC_release\fP(&(c->lock));"

.SH "Function Documentation"
.PP 
.SS "void PICC_channel_dec_ref_count (\fBPICC_Channel\fP *channel)"
Decrements the global reference count of a channel\&.
.PP
\fBParameters:\fP
.RS 4
\fIChannel\fP to update 
.RE
.PP

.SS "void PICC_channel_incr_ref_count (\fBPICC_Channel\fP *channel)"
Increments the global reference count of a channel\&.
.PP
\fBParameters:\fP
.RS 4
\fIChannel\fP to update 
.RE
.PP

.SS "\fBPICC_Channel\fP* PICC_create_channel ()"
Creates a channel which contains 10 commitments\&.
.PP
\fBReturns:\fP
.RS 4
Created channel 
.RE
.PP

.SS "\fBPICC_Channel\fP* PICC_create_channel_cn (intcommit_size)"
Creates a channel which contains <commit_size> commitments\&.
.PP
\fBReturns:\fP
.RS 4
Created channel 
.RE
.PP

.SS "\fBPICC_Knowns\fP* PICC_create_knowns (\fBPICC_Error\fP *error)"
Creates a new Knowns structure\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created knowns structure 
.RE
.PP

.SS "\fBPICC_KnownsSet\fP* PICC_create_knowns_set (intlength, \fBPICC_Error\fP *error)"
Creates a new Knowns set\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Error stack 
.RE
.PP
\fBReturns:\fP
.RS 4
Created knowns set 
.RE
.PP

.SS "bool PICC_knowns_register (\fBPICC_KnownsSet\fP *ks, \fBPICC_Channel\fP *ch)"
Adds a channel to a knowns set\&.
.PP
Looks for a channel in a PICC_KnownsSet
.IP "\(bu" 2
if the channel is in the PICC_KnownsSet in KNOWN-STATE, it returns false
.IP "\(bu" 2
if the channel is in the PICC_KnownsSet in FORGET-STATE, it switches it to KNOWN then returns false
.IP "\(bu" 2
else it add the channel in the PICC_KnownsSet (KNOWS-STATE) then returns true
.PP
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knowns set 
.br
\fIch\fP Channel to add 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether the channel has been added 
.RE
.PP

.SS "\fBPICC_KnownsSet\fP* PICC_knowns_set_forget (\fBPICC_KnownsSet\fP *ks)"
Returns a subset of all FORGET-STATE in a knowns set\&.
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knowns set 
.RE
.PP
\fBReturns:\fP
.RS 4
Subset of all forget state in the given set\&. 
.RE
.PP

.SS "void PICC_knowns_set_forget_all (\fBPICC_KnownsSet\fP *ks)"
Switches all KNOWN state elements of a KnowsSet to FORGET state\&.
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knows set 
.RE
.PP

.SS "void PICC_knowns_set_forget_to_unknown (\fBPICC_KnownsSet\fP *ks, \fBPICC_Channel\fP *ch)"
Switches an element of a KnowsSet from the FORGET state to the UNKNOWN state\&.
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knows set 
.br
\fIch\fP Channel to switch state 
.RE
.PP

.SS "\fBPICC_KnownsSet\fP* PICC_knowns_set_knows (\fBPICC_KnownsSet\fP *ks)"
Returns a subset of all KNOWN-STATE in a knows set\&.
.PP
\fBParameters:\fP
.RS 4
\fIks\fP Knowns set 
.RE
.PP
\fBReturns:\fP
.RS 4
Subset of all known state in the given set 
.RE
.PP

.SS "void PICC_reclaim_channel (\fBPICC_Channel\fP *channel, \fBPICC_Error\fP *error)"
Reclaims the given channel\&.
.PP
\fBParameters:\fP
.RS 4
\fIchannel\fP Channel to reclaim 
.RE
.PP

.SS "void PICC_release_all_channels (\fBPICC_Channel\fP **chans, intnb_chans)"
Releases all the given channels\&.
.PP
\fBParameters:\fP
.RS 4
\fIchans\fP Set of channels to release 
.br
\fInb_chans\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for PiThread from the source code\&.
