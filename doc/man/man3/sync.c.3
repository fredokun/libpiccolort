.TH "src/sync.c" 3 "Fri Jan 25 2013" "PiThread" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/sync.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sync\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBPICC_init_mutex\fP (\fBPICC_Mutex\fP mutex)"
.br
.ti -1c
.RI "void \fBPICC_init_condition\fP (\fBPICC_Condition\fP cond)"
.br
.ti -1c
.RI "void \fBPICC_acquire\fP (\fBPICC_Mutex\fP mutex)"
.br
.ti -1c
.RI "void \fBPICC_release\fP (\fBPICC_Mutex\fP mutex, \fBPICC_Error\fP *error)"
.br
.ti -1c
.RI "void \fBPICC_cond_wait\fP (\fBPICC_Condition\fP cond, \fBPICC_Mutex\fP lock)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Synchronisation facilities\&.
.PP
This project is released under MIT License\&.
.PP
\fBAuthor:\fP
.RS 4
MickaÃ«l MENU 
.PP
Maxence WO 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void PICC_acquire (\fBPICC_Mutex\fPmutex)"
Locks the given mutex\&.
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP Mutex to lock\&. 
.RE
.PP

.SS "void PICC_cond_wait (\fBPICC_Condition\fPcond, \fBPICC_Mutex\fPlock)"
Waits for the condition over the given mutex\&.
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP Mutex condition 
.br
\fImutex\fP Mutex 
.RE
.PP

.SS "void PICC_init_condition (\fBPICC_Condition\fPcond)"
Initializes the given condition\&.
.PP
\fBParameters:\fP
.RS 4
\fIcond\fP Condition to initialize 
.RE
.PP

.SS "void PICC_init_mutex (\fBPICC_Mutex\fPmutex)"
Initializes the given mutex\&.
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP Mutex to initialize 
.RE
.PP

.SS "void PICC_release (\fBPICC_Mutex\fPmutex, \fBPICC_Error\fP *error)"
Unlocks the given mutex, fail if the mutex is already unlocked\&.
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP Mutex to unlock 
.br
\fIerror\fP Error stack 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for PiThread from the source code\&.
